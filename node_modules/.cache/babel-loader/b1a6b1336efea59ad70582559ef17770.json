{"ast":null,"code":"import bytesToUuid from './bytesToUuid.js';\n\nfunction uuidToBytes(uuid) {\n  // Note: We assume we're being passed a valid uuid string\n  var bytes = [];\n  uuid.replace(/[a-fA-F0-9]{2}/g, function (hex) {\n    bytes.push(parseInt(hex, 16));\n  });\n  return bytes;\n}\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  var bytes = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nexport var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function (name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    var off = buf && offset || 0;\n    if (typeof value === 'string') value = stringToBytes(value);\n    if (typeof namespace === 'string') namespace = uuidToBytes(namespace);\n\n    if (!Array.isArray(value)) {\n      throw TypeError('value must be an array of bytes');\n    }\n\n    if (!Array.isArray(namespace) || namespace.length !== 16) {\n      throw TypeError('namespace must be uuid string or an Array of 16 byte values');\n    } // Per 4.3\n\n\n    var bytes = hashfunc(namespace.concat(value));\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      for (var idx = 0; idx < 16; ++idx) {\n        buf[off + idx] = bytes[idx];\n      }\n    }\n\n    return buf || bytesToUuid(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","map":{"version":3,"sources":["/Users/joycesilvera/react-todo/node_modules/uuid/dist/esm-browser/v35.js"],"names":["bytesToUuid","uuidToBytes","uuid","bytes","replace","hex","push","parseInt","stringToBytes","str","unescape","encodeURIComponent","i","length","charCodeAt","DNS","URL","name","version","hashfunc","generateUUID","value","namespace","buf","offset","off","Array","isArray","TypeError","concat","idx","err"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,kBAAxB;;AAEA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACzB;AACA,MAAIC,KAAK,GAAG,EAAZ;AACAD,EAAAA,IAAI,CAACE,OAAL,CAAa,iBAAb,EAAgC,UAAUC,GAAV,EAAe;AAC7CF,IAAAA,KAAK,CAACG,IAAN,CAAWC,QAAQ,CAACF,GAAD,EAAM,EAAN,CAAnB;AACD,GAFD;AAGA,SAAOF,KAAP;AACD;;AAED,SAASK,aAAT,CAAuBC,GAAvB,EAA4B;AAC1BA,EAAAA,GAAG,GAAGC,QAAQ,CAACC,kBAAkB,CAACF,GAAD,CAAnB,CAAd,CAD0B,CACe;;AAEzC,MAAIN,KAAK,GAAG,EAAZ;;AAEA,OAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAAG,CAACI,MAAxB,EAAgC,EAAED,CAAlC,EAAqC;AACnCT,IAAAA,KAAK,CAACG,IAAN,CAAWG,GAAG,CAACK,UAAJ,CAAeF,CAAf,CAAX;AACD;;AAED,SAAOT,KAAP;AACD;;AAED,OAAO,IAAIY,GAAG,GAAG,sCAAV;AACP,OAAO,IAAIC,GAAG,GAAG,sCAAV;AACP,eAAe,UAAUC,IAAV,EAAgBC,OAAhB,EAAyBC,QAAzB,EAAmC;AAChD,WAASC,YAAT,CAAsBC,KAAtB,EAA6BC,SAA7B,EAAwCC,GAAxC,EAA6CC,MAA7C,EAAqD;AACnD,QAAIC,GAAG,GAAGF,GAAG,IAAIC,MAAP,IAAiB,CAA3B;AACA,QAAI,OAAOH,KAAP,KAAiB,QAArB,EAA+BA,KAAK,GAAGb,aAAa,CAACa,KAAD,CAArB;AAC/B,QAAI,OAAOC,SAAP,KAAqB,QAAzB,EAAmCA,SAAS,GAAGrB,WAAW,CAACqB,SAAD,CAAvB;;AAEnC,QAAI,CAACI,KAAK,CAACC,OAAN,CAAcN,KAAd,CAAL,EAA2B;AACzB,YAAMO,SAAS,CAAC,iCAAD,CAAf;AACD;;AAED,QAAI,CAACF,KAAK,CAACC,OAAN,CAAcL,SAAd,CAAD,IAA6BA,SAAS,CAACT,MAAV,KAAqB,EAAtD,EAA0D;AACxD,YAAMe,SAAS,CAAC,6DAAD,CAAf;AACD,KAXkD,CAWjD;;;AAGF,QAAIzB,KAAK,GAAGgB,QAAQ,CAACG,SAAS,CAACO,MAAV,CAAiBR,KAAjB,CAAD,CAApB;AACAlB,IAAAA,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAL,GAAW,IAAX,GAAkBe,OAA7B;AACAf,IAAAA,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAL,GAAW,IAAX,GAAkB,IAA7B;;AAEA,QAAIoB,GAAJ,EAAS;AACP,WAAK,IAAIO,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4B,EAAEA,GAA9B,EAAmC;AACjCP,QAAAA,GAAG,CAACE,GAAG,GAAGK,GAAP,CAAH,GAAiB3B,KAAK,CAAC2B,GAAD,CAAtB;AACD;AACF;;AAED,WAAOP,GAAG,IAAIvB,WAAW,CAACG,KAAD,CAAzB;AACD,GA1B+C,CA0B9C;;;AAGF,MAAI;AACFiB,IAAAA,YAAY,CAACH,IAAb,GAAoBA,IAApB,CADE,CACwB;AAC3B,GAFD,CAEE,OAAOc,GAAP,EAAY,CAAE,CA/BgC,CA+B/B;;;AAGjBX,EAAAA,YAAY,CAACL,GAAb,GAAmBA,GAAnB;AACAK,EAAAA,YAAY,CAACJ,GAAb,GAAmBA,GAAnB;AACA,SAAOI,YAAP;AACD","sourcesContent":["import bytesToUuid from './bytesToUuid.js';\n\nfunction uuidToBytes(uuid) {\n  // Note: We assume we're being passed a valid uuid string\n  var bytes = [];\n  uuid.replace(/[a-fA-F0-9]{2}/g, function (hex) {\n    bytes.push(parseInt(hex, 16));\n  });\n  return bytes;\n}\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  var bytes = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nexport var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function (name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    var off = buf && offset || 0;\n    if (typeof value === 'string') value = stringToBytes(value);\n    if (typeof namespace === 'string') namespace = uuidToBytes(namespace);\n\n    if (!Array.isArray(value)) {\n      throw TypeError('value must be an array of bytes');\n    }\n\n    if (!Array.isArray(namespace) || namespace.length !== 16) {\n      throw TypeError('namespace must be uuid string or an Array of 16 byte values');\n    } // Per 4.3\n\n\n    var bytes = hashfunc(namespace.concat(value));\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      for (var idx = 0; idx < 16; ++idx) {\n        buf[off + idx] = bytes[idx];\n      }\n    }\n\n    return buf || bytesToUuid(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}"]},"metadata":{},"sourceType":"module"}