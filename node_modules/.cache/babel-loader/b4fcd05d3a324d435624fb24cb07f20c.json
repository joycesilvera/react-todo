{"ast":null,"code":"/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\n}\n\nexport default bytesToUuid;","map":{"version":3,"sources":["/Users/joycesilvera/react-todo/node_modules/uuid/dist/esm-browser/bytesToUuid.js"],"names":["byteToHex","i","push","toString","substr","bytesToUuid","buf","offset","bth","toLowerCase"],"mappings":"AAAA;;;;AAIA,IAAIA,SAAS,GAAG,EAAhB;;AAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyB,EAAEA,CAA3B,EAA8B;AAC5BD,EAAAA,SAAS,CAACE,IAAV,CAAe,CAACD,CAAC,GAAG,KAAL,EAAYE,QAAZ,CAAqB,EAArB,EAAyBC,MAAzB,CAAgC,CAAhC,CAAf;AACD;;AAED,SAASC,WAAT,CAAqBC,GAArB,EAA0BC,MAA1B,EAAkC;AAChC,MAAIN,CAAC,GAAGM,MAAM,IAAI,CAAlB;AACA,MAAIC,GAAG,GAAGR,SAAV,CAFgC,CAEX;AACrB;;AAEA,SAAO,CAACQ,GAAG,CAACF,GAAG,CAACL,CAAC,GAAG,CAAL,CAAJ,CAAH,GAAkBO,GAAG,CAACF,GAAG,CAACL,CAAC,GAAG,CAAL,CAAJ,CAArB,GAAoCO,GAAG,CAACF,GAAG,CAACL,CAAC,GAAG,CAAL,CAAJ,CAAvC,GAAsDO,GAAG,CAACF,GAAG,CAACL,CAAC,GAAG,CAAL,CAAJ,CAAzD,GAAwE,GAAxE,GAA8EO,GAAG,CAACF,GAAG,CAACL,CAAC,GAAG,CAAL,CAAJ,CAAjF,GAAgGO,GAAG,CAACF,GAAG,CAACL,CAAC,GAAG,CAAL,CAAJ,CAAnG,GAAkH,GAAlH,GAAwHO,GAAG,CAACF,GAAG,CAACL,CAAC,GAAG,CAAL,CAAJ,CAA3H,GAA0IO,GAAG,CAACF,GAAG,CAACL,CAAC,GAAG,CAAL,CAAJ,CAA7I,GAA4J,GAA5J,GAAkKO,GAAG,CAACF,GAAG,CAACL,CAAC,GAAG,CAAL,CAAJ,CAArK,GAAoLO,GAAG,CAACF,GAAG,CAACL,CAAC,GAAG,CAAL,CAAJ,CAAvL,GAAsM,GAAtM,GAA4MO,GAAG,CAACF,GAAG,CAACL,CAAC,GAAG,EAAL,CAAJ,CAA/M,GAA+NO,GAAG,CAACF,GAAG,CAACL,CAAC,GAAG,EAAL,CAAJ,CAAlO,GAAkPO,GAAG,CAACF,GAAG,CAACL,CAAC,GAAG,EAAL,CAAJ,CAArP,GAAqQO,GAAG,CAACF,GAAG,CAACL,CAAC,GAAG,EAAL,CAAJ,CAAxQ,GAAwRO,GAAG,CAACF,GAAG,CAACL,CAAC,GAAG,EAAL,CAAJ,CAA3R,GAA2SO,GAAG,CAACF,GAAG,CAACL,CAAC,GAAG,EAAL,CAAJ,CAA/S,EAA8TQ,WAA9T,EAAP;AACD;;AAED,eAAeJ,WAAf","sourcesContent":["/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\n}\n\nexport default bytesToUuid;"]},"metadata":{},"sourceType":"module"}